{"version":3,"sources":["js/DB.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","signInAnonymously","geoSuccess","position","UTILS","POSITION","navigator","geolocation","getCurrentPosition","toArray","object","array","prop","push","convertUnixTimeToPMAM","unixTime","date","hours","getHours","minutes","getMinutes","ampm","Date","previousScrollY","undefined","freezeScreen","window","scrollY","setTimeout","scrollTo","document","body","classList","add","unfreezeScreen","remove","get","URL","callback","request","XMLHttpRequest","addEventListener","open","send","getAddress","response","address","results","length","forEach","addressComponent","types","includes","long_name","DB","getEmojions","database","ref","once","then","snapshot","val","getEntries","user","uid","on","entries","getEmptyTracking","trackEntry","emojion","data","emoji","time","ServerValue","TIMESTAMP","color","entry","set","latitude","coords","longitude","GOOGLEMAPS_API_URL","event","JSON","parse","this","responseText","e","console","log"],"mappings":"AACAA,SAASC,eACPC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,iBAIrBP,SAASQ,OAAOC,oBAGf,WAEC,QAASC,GAAWC,GAClBC,MAAMC,SAAWF,EAGnBG,UAAUC,YAAYC,mBAAmBN,EAAY,gBAIvD,IAAIE,QAIFK,QAAS,SAAUC,GAEjB,GAAIC,KAEJ,KAAK,GAAIC,KAAQF,GACfA,EAAOE,GAAM,QAAUA,EACvBD,EAAME,KAAKH,EAAOE,GAGpB,OAAOD,IAGTG,sBAAuB,SAAUC,GAgB/B,MAdA,UAAoBC,GAClB,GAAIC,GAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACfC,EAAOJ,GAAS,GAAK,KAAO,IAQhC,OALAA,IAAgB,GAChBA,EAAQA,GAAgB,GACxBE,EAAUA,EAAU,GAAK,IAAIA,EAAUA,EAE7BF,EAAQ,IAAME,EAAU,IAAME,GAIxB,GAAIC,MAAKP,KAI7BQ,oBAAiBC,GAEjBC,aAAc,WACZrB,MAAMmB,gBAAkBG,OAAOC,QAC/BC,WAAW,WACTF,OAAOG,SAAS,EAAG,IAClB,GACHC,SAASC,KAAKC,UAAUC,IAAI,cAG9BC,eAAgB,WAEdN,WAAW,WACTF,OAAOG,SAAS,EAAGzB,MAAMmB,kBACxB,GAEHO,SAASC,KAAKC,UAAUG,OAAO,cAIjCC,IAAK,SAAUC,EAAKC,GAClB,GAAIC,GAAU,GAAIC,eAElBD,GAAQE,iBAAiB,OAAQH,GACjCC,EAAQG,KAAK,MAAOL,GACpBE,EAAQI,QAIVC,WAAY,SAAUC,GAEpB,GAAIC,GAAU,EAgBd,OAdID,GAASE,QAAQC,QAEnBH,EAASE,QAAQ,GAAuB,mBAAEE,QAAQ,SAAUC,GAEtDA,EAAiBC,MAAMC,SAAS,iBAClCN,GAAWI,EAAiBG,UAAY,MAGtCH,EAAiBC,MAAMC,SAAS,cAClCN,GAAWI,EAAiBG,aAK3BP,IAIPQ,IAGFC,YAAa,WACX,MAAO/D,UAASgE,WAAWC,IAAI,YAAYC,KAAK,SAASC,KACvD,SAASC,GAEP,MADeA,GAASC,SAK9BC,WAAY,SAAUxB,GACpB,MAAO9C,UAASQ,OAAOC,oBAAoB0D,KAAK,SAAUI,GACxD,MAAOvE,UAASgE,WAAWC,IAAI,WAAaM,EAAKC,KAAKC,GAAG,QAAS,SAASL,GACvE,GAAIM,GAAUN,EAASC,KACzBvB,GAASlC,MAAMK,QAAQyD,SAK7BC,iBAAkB,WAChB,MAAO3E,UAASgE,WAAWC,IAAI,iBAAiBC,KAAK,SAASC,KAC5D,SAAUC,GAER,MADoBA,GAASC,SAMnCO,WAAY,SAAUC,GACpB,MAAO7E,UAASQ,OAAOC,oBAAoB0D,KAAK,SAAUI,GAExD,GAAIO,IACFC,MAAOF,EAAQE,MACfC,KAAMhF,SAASgE,SAASiB,YAAYC,UACpCC,MAAON,EAAQM,OAIbC,EAAQpF,SAASgE,WAAWC,IAAI,WAAaM,EAAKC,KAAKnD,MAI3D,IAHA+D,EAAMC,IAAIP,OAGoB,KAAnBlE,MAAMC,SAA0B,CACzC,GAAIyE,GAAW1E,MAAMC,SAAS0E,OAAOD,SACjCE,EAAY5E,MAAMC,SAAS0E,OAAOC,UAElCC,EAAqB,4DAA8DH,EAAW,IAAME,EAAY,cAGpH5E,OAAMgC,IAAI6C,EAAoB,SAAUC,GAEtC,GAAIrC,EAGJ,KACEA,EAAWsC,KAAKC,MAAMC,KAAKC,cAC3B,MAAOC,GACPC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,GAGdjB,EAAKxB,QAAU1C,MAAMwC,WAAWC,GAGhC+B,EAAMC,IAAIP","file":"DB.min.js","sourcesContent":["// Initialize Firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyD_Lna7XxvzEXr-JxqrJJoEXGA5PA48ivk\",\n  authDomain: \"emojional-life.firebaseapp.com\",\n  databaseURL: \"https://emojional-life.firebaseio.com\",\n  projectId: \"emojional-life\",\n  storageBucket: \"emojional-life.appspot.com\",\n  messagingSenderId: \"888518070529\"\n});\n\n// Go ahead and sign the user in anonymously as quickly as possible.\nfirebase.auth().signInAnonymously();\n\n// Ask for position right away.\n(function () {\n  \n  function geoSuccess(position) {\n    UTILS.POSITION = position;\n  }\n  \n  navigator.geolocation.getCurrentPosition(geoSuccess, function () { });\n  \n}());\n\nvar UTILS = {\n  \n  /*\n   * @description - Takes a firebase object in the form of { \"ao49ds\": { } } and converts into array of objects with \".key\" property. */\n  toArray: function (object) {\n    \n    var array = [];\n    \n    for (var prop in object) {\n      object[prop][\".key\"] = prop;\n      array.push(object[prop]);\n    }\n    \n    return array;\n  },\n  \n  convertUnixTimeToPMAM: function (unixTime) {\n    \n    function formatAMPM(date) {\n      var hours = date.getHours(),\n          minutes = date.getMinutes(),\n          ampm = hours >= 12 ? 'pm' : 'am',\n          strTime = undefined;\n      \n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n      minutes = minutes < 10 ? '0'+minutes : minutes;\n      \n      strTime = hours + ':' + minutes + ' ' + ampm;\n      return strTime;\n    }\n    \n    return formatAMPM(new Date(unixTime));\n    \n  },\n  \n  previousScrollY: undefined,\n  \n  freezeScreen: function () {\n    UTILS.previousScrollY = window.scrollY; // Store the old scroll position\n    setTimeout(function () {\n      window.scrollTo(0, 0); // Jump back to top for selecting emoji.\n    }, 0);\n    document.body.classList.add(\"O(hidden)\");\n  },\n  \n  unfreezeScreen: function () {\n    \n    setTimeout(function () {\n      window.scrollTo(0, UTILS.previousScrollY);\n    }, 0);\n    \n    document.body.classList.remove(\"O(hidden)\");\n    \n  },\n  \n  get: function (URL, callback) {\n    var request = new XMLHttpRequest();\n    \n    request.addEventListener(\"load\", callback);\n    request.open(\"GET\", URL);\n    request.send();\n    \n  },\n  \n  getAddress: function (response) {\n    \n    var address = \"\";\n    \n    if (response.results.length) {\n      \n      response.results[0][\"address_components\"].forEach(function (addressComponent) {\n        \n        if (addressComponent.types.includes(\"sublocality\")) {\n          address += addressComponent.long_name + \", \";\n        }\n        \n        if (addressComponent.types.includes(\"locality\")) {\n          address += addressComponent.long_name\n        }\n      });\n    }\n    \n    return address;\n  }\n};\n\nvar DB = {\n  \n  // GETTERS\n  getEmojions: function () {\n    return firebase.database().ref('emojions').once('value').then(\n      function(snapshot) {\n        var emojions = snapshot.val();\n        return emojions;\n      });\n  },\n  \n  getEntries: function (callback) {\n    return firebase.auth().signInAnonymously().then(function (user) {\n      return firebase.database().ref('entries/' + user.uid).on('value', function(snapshot) {\n          var entries = snapshot.val();\n        callback(UTILS.toArray(entries));\n        });\n    });\n  },\n  \n  getEmptyTracking: function () {\n    return firebase.database().ref('emptyTracking').once('value').then(\n      function (snapshot) {\n        var emptyTracking = snapshot.val();\n        return emptyTracking;\n    });\n  },\n  \n  // SETTERS\n  trackEntry: function (emojion) {\n    return firebase.auth().signInAnonymously().then(function (user) {\n      \n      var data = {\n        emoji: emojion.emoji,\n        time: firebase.database.ServerValue.TIMESTAMP,\n        color: emojion.color\n      };\n      \n      // Go ahead and save the data as is.\n      var entry = firebase.database().ref(\"entries/\" + user.uid).push();\n      entry.set(data);\n      \n      // But if we have position data, then get that and add it to the entries later.\n      if (typeof UTILS.POSITION !== \"undefined\") {\n        var latitude = UTILS.POSITION.coords.latitude,\n            longitude = UTILS.POSITION.coords.longitude;\n        \n        var GOOGLEMAPS_API_URL = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + latitude + \",\" + longitude + \"&sensor=true\";\n        \n        \n        UTILS.get(GOOGLEMAPS_API_URL, function (event) {\n          \n          var response,\n              address;\n          \n          try {\n            response = JSON.parse(this.responseText);\n          } catch (e) {\n            console.log(\"Caught!\");\n            console.log(e);\n          }\n          \n          data.address = UTILS.getAddress(response);\n          \n          // Set the entry again with the address in place.\n          entry.set(data);\n          \n        });\n      }\n      \n    });\n  }\n};"]}