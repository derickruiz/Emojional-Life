{"version":3,"sources":["js/app.js"],"names":["EmojionalLife","Vue","el","data","shouldShowEmoji","entries","undefined","emojions","emptyTracking","created","self","this","DB","getEmojions","then","getEmptyTracking","getEntries","updated","$el","querySelector","hammertime","Hammer","on","ev","toggleEmoji","methods","bool","UTILS","freezeScreen","unfreezeScreen","convertTime","unixTime","convertUnixTimeToPMAM","trackEntry","emojion","console","log"],"mappings":"AAAA,GAAIA,eAAgB,GAAIC,MACtBC,GAAI,OACJC,MACEC,iBAAiB,EACjBC,YAASC,GACTC,aAAUD,GACVE,kBAAeF,IAGjBG,QAAS,WAEP,GAAIC,GAAOC,IAGXC,IAAGC,cAAcC,KAAK,SAAUP,GAC9BG,EAAKH,SAAWA,IAIlBK,GAAGG,mBAAmBD,KAAK,SAAUN,GACnCE,EAAKF,cAAgBA,IAIvBI,GAAGI,WAAW,SAAUX,GACtBK,EAAKL,QAAUA,KAInBY,QAAS,WAEP,GAAIP,GAAOC,IAEX,QAAqC,KAA1BD,EAAKQ,IAAIC,cAApB,CAIE,GAAIC,GAAa,GAAIC,QAAOX,EAAKQ,IAAIC,cAAc,eAEnDC,GAAWE,GAAG,YAAa,SAASC,GAClCb,EAAKc,aAAY,KAGnBJ,EAAWE,GAAG,aAAc,SAASC,GACnCb,EAAKc,aAAY,OAMvBC,SAOED,YAAa,SAAUE,GAGnBf,KAAKP,oBADa,KAATsB,EACcA,GAECf,KAAKP,gBAG3BO,KAAKP,gBACPuB,MAAMC,eAEND,MAAME,kBAQVC,YAAa,SAAUC,GACrB,MAAOJ,OAAMK,sBAAsBD,IAOrCE,WAAY,SAAUC,GACpBtB,GAAGqB,WAAWC,GAASpB,KAAK,WAC1BqB,QAAQC,IAAI","file":"app.min.js","sourcesContent":["var EmojionalLife = new Vue({\n  el: \"#app\",\n  data: {\n    shouldShowEmoji: true,\n    entries: undefined,\n    emojions: undefined,\n    emptyTracking: undefined\n  },\n  \n  created: function () {\n    \n    var self = this;\n    \n    // Get the initial emojions\n    DB.getEmojions().then(function (emojions) {\n      self.emojions = emojions;\n    });\n    \n    // Get the empty tracking emoji\n    DB.getEmptyTracking().then(function (emptyTracking) {\n      self.emptyTracking = emptyTracking;\n    });\n    \n    // Get entries if any exist.\n    DB.getEntries(function (entries) {\n      self.entries = entries;\n    });\n  },\n  \n  updated: function () {\n    \n    var self = this;\n    \n    if (typeof self.$el.querySelector == \"undefined\") {\n      return;\n    } else {\n      \n      var hammertime = new Hammer(self.$el.querySelector(\".js-toucher\"));\n      \n      hammertime.on('swipeleft', function(ev) {\n        self.toggleEmoji(false);\n      });\n      \n      hammertime.on('swiperight', function(ev) {\n        self.toggleEmoji(true);\n      });\n      \n    }\n    \n  },\n  methods: {\n    \n    /*\n     * @description: Whether to show the Emoji page or the Tracking page\n     * Toggles by default but if passed in a value goes to that value\n     * @param bool:Boolean - the state to toggle it to.\n     * @use - Being used with click event */\n    toggleEmoji: function (bool) {\n      \n      if (typeof bool !== \"undefined\") {\n        this.shouldShowEmoji = bool;\n      } else {\n        this.shouldShowEmoji = !this.shouldShowEmoji;\n      }\n      \n      if (this.shouldShowEmoji) {\n        UTILS.freezeScreen();\n      } else {\n        UTILS.unfreezeScreen();\n      }\n    },\n    \n    /*\n     * @converts the entries time into a more readable format.\n     */\n    \n    convertTime: function (unixTime) {\n      return UTILS.convertUnixTimeToPMAM(unixTime);\n    },\n    \n    /*\n     * @description: Puts a new entry into tracking\n     * @use - Called from click event.\n     */\n    trackEntry: function (emojion) {\n      DB.trackEntry(emojion).then(function () {\n        console.log(\"success!\");\n      });\n    }\n  }\n});"]}